#!/usr/intel/bin/perl5.14.1 
#
#
#TASKS
# 	clean unneeded code
# 	add option for title (--title "something here")
# MAYBE LATER:
# 	pretty print (shouldn't be hard but i hate it!)


use FindBin qw($Bin);
use List::MoreUtils qw(uniq);

our @GLOBAL;
our @DEFAULT;
our @FILES;
our $GroupID;
our $GroupName;
our $TemplateName;

our $SLA = 24; # in hours

if ($ENV{GK_MODELROOT} ) {
  $ENV{MODEL_ROOT} ||= $ENV{GK_MODELROOT};
  $ENV{PWD} = $ENV{GK_MODELROOT};
  $ENV{RTL_PROJ_TOOLS} = "/p/hdk/rtl/proj_tools/";
  $ENV{RTL_PROJ_BIN} = "/p/hdk/rtl/proj_tools/proj_binx/xhdk74/latest/";
  $ENV{branch_is} = $ENV{GK_BRANCH};
  $ENV{STEPPING} = $ENV{GK_STEPPING};
  $ENV{CLUSTER_NAME} = $ENV{GK_CLUSTER};
}
#do "$Bin/code_collab.cfg";
my $cfg_file =  "$Bin/$ENV{STEPPING}.$ENV{CLUSTER_NAME}.cfg";
if ($ENV{CCOLLAB_CFG_FILE}) {
  $cfg_file = $ENV{CCOLLAB_CFG_FILE};
}

unless (-e $cfg_file) {
  print "can't find main cfg file $cfg_file - exiting\n";
  exit(1);
}
unless (my $return = do $cfg_file) {
  warn "couldn't parse $cfg_file: $@" if $@;
  warn "couldn't do $cfg_file: $!"    unless defined $return;
  warn "couldn't run $cfg_file"       unless $return;
  exit(1);
}

print "using cfg file $cfg_file\n";

$main::Usage = <<'  ENDUSAGE';
Usage: code_collab 
    --create                           Will create a code review from your changeset.
                                       If a review already exists - but not updated to the 
                                       latest changeset - will update the existing review.
                                       If a review exists and updated - will do nothing. 
    --check_files <file1>,<file2>...   Will check the configuration against the list of files
                                       and print each file reviewers,observers, and the file
                                       where the configuration was found
    -h                                 Displays help message
  ENDUSAGE

#
#############################################################################
#
# ------- RCS info ----------------------------------------------------
# $Log: template,v $
#############################################################################

use strict;
use warnings;
use Carp;
use Template;
use File::Basename;
use Text::CSV;
use Date::Format;
use Intel::CDISLookup;
use Intel::WorkWeek;
use Date::Parse;

#my($CCOLLAB_EXE)       = "/usr/intel/pkgs/ccollab/7.3.7302/ccollab";
my ($CCOLLAB_EXE)   = "$ENV{RTL_PROJ_TOOLS}/code_collab_client/latest/ccollab";
my ($INDICATOR_DIR) = "/nfs/site/proj/cnl/cnl.gk.workarea.1/CODE_COLLAB/indicators_$ENV{CLUSTER_NAME}/csv";
my ($GIT_EXE)       = "$ENV{RTL_PROJ_BIN}/git"; #"/usr/intel/pkgs/git/1.8.5.4/bin/git";

#my($GLOBAL_CONFIGFILE) = dirname($0)."/global_codecollab_config.list";
my ($ME) = 'cradmin';    #                = (getpwuid($>))[0];

#my ($ME)          = (getpwuid($>))[0];
my ($CCOLLAB_URL) = "https://fm-codecollab.intel.com";
$ENV{INSTALL4J_JAVA_HOME} = "/usr/intel/pkgs/java/1.7.0.45-64";
my ($PW) = `cat $ENV{RTL_PROJ_TOOLS}/code_collab/latest/.newpw`;
chomp($PW);
my (%AllUIDs, %AllReviewers, %UnknownEmailAddresses);

# Ensure specified version of git is first in path
#$ENV{'PATH'} = dirname($GIT_EXE) . ":" . $ENV{'PATH'};

#############################################################################
# Subroutines
#############################################################################

#############################################################################
# Name          : DoCommandlineOptions
# Description   : Handles command line options
# Assumes       :
# Results       : Uses perl included Getopt::Long subroutine to handle
#               : command line options
# Notes         : For information on Getopt::Long, read the perl
#               :  documentation or look at the code/pod file in the perl
#               :  lib directory
# Calls         : REM: include later
# Called By     : Main
# Inputs        :
# Variable Desc.:
#               : GLOBAL::$Usage    = Contains the Usage error message that
#               :                     is printed out when there are command
#               :                     line errors
#               : GLOBAL::$opt_help = Set by Getopt::Long, contains -h
#               :                     command line value (1 or not defined)
#############################################################################

sub DoCommandlineOptions
{
  $main::opt_update = 0;
  $main::opt_help   = 0;
  $main::opt_create = 0;
  $main::opt_close = 0;
    #$main::opt_globalconfig    = 1;

   # $main::opt_indicators = 0;

    use Getopt::Long qw(:config auto_abbrev);
    &GetOptions(
                "help|h",       "debug|d",    "git_hook",      "xmlfile=s",     "totsha=s", "turninsha=s",
                "ownersFile=s", "printReviewers=s", "revert",        "indicators", "status=s",
                "deletexml!",   "reassign=i",       "globalconfig!", "review=s", "update", "close",
                "user=s",       "info=s",           "nongating",     "title=s"  , "check_files=s" , "create", "reviewers=s",
               ) || die $main::Usage;

    if ($main::opt_help)
    {
        print $main::Usage;
        exit;
    }

   

    die $main::Usage if ($#ARGV >= 0);
  #  die $main::Usage unless defined($main::opt_xmlfile);
  #  die $main::Usage unless defined($main::opt_ownersFile);

#    while (-l $main::opt_ownersFile)
#    {
#        $main::opt_ownersFile = readlink($main::opt_ownersFile);
#    }
} ## end sub DoCommandlineOptions


sub get_shas {
 my $totSha;
        $totSha = `$GIT_EXE rev-parse origin `;

    #Change this to manually generate reviews after the turnin has been accepted.
    #change this value to old TOT sha1
    $totSha = $main::opt_totsha if ($main::opt_totsha);
    chomp($totSha);
    my $turninSha = `$GIT_EXE rev-parse --verify HEAD`;
    chomp($turninSha);
  return ($totSha,$turninSha);
} # END sub get_shas 


sub update_git_message
{
	my ($code_review_number) = @_;
	my ($git_message_cmd) = "cd $ENV{MODEL_ROOT} ; $GIT_EXE log -1 --pretty=%B";
	my ($git_message) = 	`$git_message_cmd`;
	chomp($git_message);
	my ($git_new_message) = "Code review#$code_review_number $git_message";
	my ($git_amend_cmd)  = "cd $ENV{MODEL_ROOT} ; $GIT_EXE commit --amend -m \"$git_new_message\"";
	my ($gitreturn) = `$git_amend_cmd`;
} ## end sub update_git_message

my (@CDIS);

my (%NameCache);

my ($Settings);

# Default value for sip groupid
$Settings->{config}->{SIPGroupID} = ['b29fb0be5ea0ffb29e491cc3026a4217'];


# Assumes code collaborator review id is in the git log in the fommat:
#
# CCOLLABREVIEWID: 1234
#
sub GetReviewID
{
    my ($text) = @_;

    # The ?'s allow for various common misspellings.
    if ($text =~ /CCOLL?AB(REVIEW)?(ID)?\s*:?\s*(\d+)/)
    {
        print "-->Found CCOLLABREVIEWID tag = $3\n";
        return ($3);
    }
    return (undef);
} ## end sub GetReviewID

sub CCollabLogin
{

    #die "\$PW must be set" unless (defined($PW));
    print "-->> Collaborator Login\n" if ($main::opt_debug);

    # Password can be the last argument, but paranoia makes me pipe the
    # password to the login command.  Any user doing a 'ps -elf' would
    # be able to see the password if it is put on the commandline.
    my ($cmd) = "$CCOLLAB_EXE login $CCOLLAB_URL $ME $PW>& /dev/null";

    #print $cmd, "\n";
    if (defined($PW))
    {
        open(LOGIN, "|$cmd") || die $!;
        sleep(1);
        print LOGIN "A", "\n";
        close(LOGIN);
    } ## end if (defined($PW))
    else
    {
        system($cmd);
    }
} ## end sub CCollabLogin

sub GetReviewData
{
    my ($reviewID) = @_;

    my ($cmd) = "$CCOLLAB_EXE admin review-xml $reviewID";
    print "$cmd\n";
    my (@xml) = `$cmd`;

    #print @xml;
    use XML::Simple;
    my ($xs) = XML::Simple->new();
    my ($xmltree) = $xs->XMLin(join("", @xml));
    return ($xmltree->{review});
} ## end sub GetReviewData



sub getReviewers {
  my @files = @_;
  my %res;
  my @src_files;
  $res{reviewers} = ();
  $res{observers} = ();
  $res{complete} = 0;

  my $match;
  my @remaining;
  my @configurations;
  push (@configurations, [@GLOBAL]);
  push (@src_files , $cfg_file); 
  for my $file (@FILES) {
    our @CONFIG;
       unless (my $return = do $file) {
        warn "couldn't parse $file: $@" if $@;
        warn "couldn't do $file: $!"    unless defined $return;
        warn "couldn't run $file"       unless $return;
    }
    push(@configurations,[@CONFIG]);
    push(@src_files, $file);

  }
  push (@configurations, [@DEFAULT]);
  push (@src_files , $cfg_file); 
  
  push (@configurations, @GLOBAL);
  for my $file (@files) {
    my @cp = @src_files;
    $match = 0;
    for my $config (@configurations) {
      my $src = pop(@cp);
    for my $cfg (@$config) {
      next if ($match);
      for my $regex (@{$cfg->{files}}) {
      if ($file =~ /^$regex/) {
        $match = 1;
        push(@{$res{reviewers}}, @{$cfg->{reviewers}});
        @{$res{files}{$file}} = @{$cfg->{reviewers}};
        push(@{$res{observers}}, @{$cfg->{observers}});
        $res{complete} += $cfg->{complete};
        @{$res{reviewers}} = uniq@{$res{reviewers}};
        @{$res{observers}} = uniq@{$res{observers}};
        if ($main::opt_check_files) {
          print "$file matching $regex - found in file $src\n";
          print "reviewers: " . join(" ",@{$cfg->{reviewers}})."\n";
          print "observers: " . join(" ",@{$cfg->{observers}})."\n";
          print "must complete: $cfg->{complete}\n";
        }

    }
  }
    }
    }
    unless ($match) {
      push(@remaining,$file);
    }

  
  }
  return %res;
}## END sub getReviewers 

#returns:
#my review id (0 if none exist)
#is my review updated to the latest commit (1/0)
sub getReviewID {
  my $from = shift;
  my $to = shift;
  my $reviewId;
  my @commit_msg = `$GIT_EXE  log --format=%B $from..$to`;
  for (@commit_msg) {
    if ($_ =~ /Code review#(\d+)/) {
      $reviewId ||= $1;
    }
  }

  my $last_msg = `$GIT_EXE log --format=%B HEAD^..HEAD`;
  if ($reviewId) {
    #already have review - is it updated?
    if ($last_msg =~/Code review#/) {
    #it is updated
      return ($reviewId,1);
    }
    else {
    #it is not updated

      return ($reviewId,0);

    }

  }
  return (0,0);

} ## END sub getReviewID 


sub addgitdiffs {
  my $reviewId = shift;
  my $temp_area = `mktemp -d /tmp/ccollab.XXXX`;
  chomp $temp_area;
    system("$GIT_EXE clone -b $ENV{branch_is} $ENV{BAK_MASTER_REPO} $temp_area >& /dev/null ");
    my @merge_issues = `cd $temp_area; $ENV{RTL_PROJ_BIN}/git ls-files -u`;
    chomp(@merge_issues);

    if ($#merge_issues >= 0)
    {
      print "There are merge conflicts in @merge_issues\n";
      die "Please fix merge conflicts before submitting a code reviewn\n";
    }

    my $cmd = "cd $temp_area;$GIT_EXE pull $ENV{MODEL_ROOT} >& /dev/null ; $CCOLLAB_EXE addgitdiffs $reviewId HEAD^ HEAD  >& /dev/null ";
    system($cmd);

    my @files_cahanged;
    $cmd = "cd $temp_area;$GIT_EXE diff --name-only HEAD^ HEAD";
    @files_cahanged = `$cmd`;
    chomp @files_cahanged;
    return @files_cahanged;
} ## END sub addgitdiffs 

sub checkReview {
  my $id = shift;
  my $x = GetReviewData($id);
  my $creationDate = $x->{general}->{creationDate};
  my $creationTime = str2time($creationDate);
  my $now = `date +%s`;
  chomp $now;
  my $passed_hours = ($now  - $creationTime )/60/60;
  print "$creationDate $creationTime $passed_hours\n";
  return unless ($x->{participants});
  return unless ($x->{participants}->{participant});
  my %userHash = %{$x->{participants}->{participant}};
  return unless ($x->{artifacts});
  return unless ($x->{artifacts}->{artifact});
  my @reviewers;
  my $found = 0;
  my $closed = 0;
  for (keys %userHash) {
    next if($userHash{email});
    print "$_ $userHash{$_}{role} $userHash{$_}{state} $userHash{$_}{login}\n";
    if ($userHash{$_}{role}  =~ /review/i) {
      $found = 1;
      if ($userHash{$_}{state} =~ /Finished/) {
        push (@reviewers,$userHash{$_}{login});
        $closed++;
      }

    }
  }
  if (!$found) {
    print "no reviwers\n";
    return;
  }
  if (!$closed) {
    print "nothing closed\n";
    return;
  }


  my @files;
  my @f;
  if( ref  $x->{artifacts}->{artifact} eq "HASH" ){
    @files =  ($x->{artifacts}->{artifact});
  }
  else {
    @files = @{$x->{artifacts}->{artifact}};
  }
  for (@files) {
    print "$_->{path}\n";
    push(@f,$_->{path});
  }
  print "POSSIBLE CLOSE $id\n";
  for (@f) {
    my $ok = 0;
    my %cfg = getReviewers(@f);
    return unless ($cfg{reviewers});
    my @tmp = @{$cfg{reviewers}};
    for my $r (@reviewers) {
      for my $t (@tmp) {
        if ($r eq $t) {
          $ok =1;
        }
      }
    }
    return unless($ok);
  }

  print "NEED TO CLOSE $id\n";

  for (keys %userHash) {
    next if($userHash{email});
    if ($userHash{$_}{role}  =~ /review/i) {
      if ($userHash{$_}{state} !~ /Finished/) {
        my $cmd = "$CCOLLAB_EXE admin review participant assign $id $userHash{$_}{login} observer";
        system($cmd);
      }

    }
  }

}## END sub checkReview 



sub closeReviews {

my $url='go?reportTitle=Reviews+Currently+In+Progress&data-format=csv&reviewAuthorUserNameVis=y&reviewIdVis=y&groupDepth=0&reviewTitleVis=y&component=ErrorsAndMessages&review_idleVis=y&ErrorsAndMessages_fingerPrint=861101&reviewTitleFilter=target%3Dpnc%7C%7C%7Ctype%3Dcontains&phaseVis=y&numDefectsVis=y&formSubmittedreportConfig=1&page=ReportReviewList&sort0=order%3Ddesc%7C%7C%7Ccol%3DreviewId&sort1=col%3D%7C%7C%7Corder%3Dasc&phaseFilter=inprogress&reviewCreationDateVis=y';
    my $cmd = "$CCOLLAB_EXE admin wget '$url'";
    print "$cmd\n" if ($main::opt_debug);
    my (@data) = `$cmd`;
    chomp @data;
    for (@data) {
      print "$_\n";
      next if ($_ =~ /-ucode/);
      next if ($_ =~ /Gibaly/);
      my $id = $_;
      $id =~ s/,.*//;
      if ($id =~ /[0-9]+/) {
      checkReview($id);
      }
    }
} ## END sub closeReviews 

#############################################################################
# Main
#############################################################################

#print "% $0 ", join(" ", @ARGV), "\n\n";
&DoCommandlineOptions;


&CCollabLogin();


if ($main::opt_close) {
#  checkReview("314081");
  closeReviews();
  exit(0);
}

#TODO: maybe improve this
if ($main::opt_status) {
  print "getting status of $main::opt_status\n";
  my $x = GetReviewData($main::opt_status);
  my $creationDate = $x->{general}->{creationDate};
  my $creationTime = str2time($creationDate);
  my $now = `date +%s`;
  chomp $now;
  my $passed_hours = ($now  - $creationTime )/60/60;
  print "$creationDate $creationTime $passed_hours\n";
print("$x->{general}->{phase}->{content}\n");
  print "reviewrs\n";
  my %userHash = %{$x->{participants}->{participant}};
  for (keys %userHash) {
    print "$_ $userHash{$_}{role} $userHash{$_}{state} $userHash{$_}{login}\n";

  }
  exit(0)

}


if ($main::opt_check_files) {
  my @files_changed = split(",",$main::opt_check_files);

  my %cfg = getReviewers(@files_changed);
  exit(0);
}


#TODO reviewrs from config
#git hook actually check status
if ($ENV{GK_STAGE} && $ENV{GK_STAGE} eq "code_review") {
#0 is rerun
#2 is pass
print "running code review\n";
`echo "THIS IS MY REVIEW" > $ENV{MODEL_ROOT}/GATEKEEPER/code_review_log.$$.log`;
sleep(500);
  exit(2);
}



my $userInput_title="";
  
#remove authors from rev/obs and rev from obs
if ($main::opt_create) {

  #title opt check :
  if ($main::opt_title){
    
    $userInput_title = $main::opt_title;
    print "user input title = $main::opt_title\n";

  }

	#do i need to create a review?
	my  ($from,$to) =  get_shas();
	#print "$from  $to\n";

	my ($reviewId,$is_updated) = getReviewID($from,$to); 
	if ($main::opt_update) {
		$is_updated = 0;
	}

	if ($reviewId) {
		my $x = GetReviewData($reviewId);
		my $status = $x->{general}->{phase}->{content};

		#already have review - is it updated?
		if ($is_updated) {
			#it is updated
			print("you already have a code review open - $reviewId\n");
			print("Link: https://fm-codecollab.intel.com/ui#review:id=$reviewId\n");
			print("nothing to do, exiting\n");
			exit(0);
		}
		elsif ($status !~ /Completed/) {
			#need to update
			my $cmd;
			print("you already have a code review open - $reviewId - but it is not updated to the last commit - updating\n");
			my @files_changed = addgitdiffs($reviewId);
			update_git_message($reviewId);
			my %cfg = getReviewers(@files_changed);
			my %used;
			my $user = $ENV{USER};
			if ($ENV{GK_USER}) {
				$user = $ENV{GK_USER};
			}
			$used{$user} = 1;
			for my $rev (@{$cfg{reviewers}}) {
				next if ($used{$rev});
				$used{$rev}=1;
				$cmd = "$CCOLLAB_EXE admin review participant assign last $rev reviewer  >& /dev/null";
				system($cmd);
			}
			for my $rev (@{$cfg{observers}}) {
				next if ($used{$rev});
				$used{$rev}=1;
				$cmd = "$CCOLLAB_EXE admin review participant assign last $rev observer >& /dev/null ";
				system($cmd);
			}
			$cmd = "$CCOLLAB_EXE admin review participant remove $reviewId $ME >& /dev/null ";
			system($cmd);
			#  my $cmd = "$CCOLLAB_EXE addgitdiffs $reviewId $from...$to";
			#   print("$cmd\n");
			# system($cmd);
			$cmd = "$CCOLLAB_EXE admin review finish last  >& /dev/null";
			system($cmd);
			print("Code review $reviewId updated\nLink: https://fm-codecollab.intel.com/ui#review:id=$reviewId\n");
			exit(0);    
		}

	}
	#need to create code review
	#
	#
	#my @files_changed = `$GIT_EXE diff --name-only $from $to`;
	#chomp(@files_changed);
  my $title;

  if($userInput_title eq ""){

	  $title = `$GIT_EXE log --format=%B HEAD^..HEAD | head -1`;
	  chomp $title;
  }
  else {
    $title= $userInput_title;
  }
	$title.= " [$ENV{STEPPING} $ENV{CLUSTER_NAME} $ENV{branch_is}]";
  
	$ENV{DISPLAY} = 0;
	my $cmd = "$CCOLLAB_EXE admin review create --title '$title' --template '$TemplateName' --group $GroupID --custom-field 'Overview=$ENV{MODEL_ROOT}'"; 
	my @output = `$cmd`;
	my $id = 0;
	for (@output) {
		if ($_ =~ /Successfully created review/) {
			$id = $_;
			$id =~ s/.* //;
			$id =~ s/\.//;
		}
	}
	if (!$id) {
		print("failed to create code review\n");
		exit(1);
	}
	chomp $id;
	my @files_changed = addgitdiffs($id);
	my %cfg = getReviewers(@files_changed);
	if ($main::opt_reviewers) {
		@{$cfg{reviewers}} = split(",",$main::opt_reviewers);
	};
	# for (keys %{$cfg{files}}) {
	#   print "$_ => @{$cfg{files}{$_}}\n";
	# 
	# }
	#reviers and observers
	my %used;
	my $user = $ENV{USER};
	if ($ENV{GK_USER}) {
		$user = $ENV{GK_USER};
	}
	$cmd = "$CCOLLAB_EXE admin review participant assign $id $user author >& /dev/null";
	system($cmd);
	$used{$user} = 1;
	for my $rev (@{$cfg{reviewers}}) {
		next if ($used{$rev});
		$used{$rev}=1;
		$cmd = "$CCOLLAB_EXE admin review participant assign $id $rev reviewer >& /dev/null";
		system($cmd);
	}
	for my $rev (@{$cfg{observers}}) {
		next if ($used{$rev});
		$used{$rev}=1;
		$cmd = "$CCOLLAB_EXE admin review participant assign $id $rev observer >& /dev/null";
		system($cmd);
	}
	# $cmd = "$CCOLLAB_EXE admin review participant assign last cradmin reviewer";
	#  system($cmd);
	#$cmd = "$CCOLLAB_EXE admin review finish last";
	#system($cmd);
	$cmd = "$CCOLLAB_EXE admin review finish $id ";
	#print "$cmd\n";
	system($cmd);
	$cmd = "$CCOLLAB_EXE admin review participant remove $id $ME >& /dev/null ";
	system($cmd);
	update_git_message($id);
	print("code review $id created\nLink: https://fm-codecollab.intel.com/ui#review:id=$id\n");
	exit(0);

}


exit(0);

